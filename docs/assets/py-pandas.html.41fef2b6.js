import{_ as a,o as n,c as s,e}from"./app.a667bd71.js";const t={},o=e(`<h5 id="label-\u6570\u636E\u5BFC\u5165" tabindex="-1"><a class="header-anchor" href="#label-\u6570\u636E\u5BFC\u5165" aria-hidden="true">#</a> @label:\u6570\u636E\u5BFC\u5165</h5><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># \u81EA\u5DF1\u521B\u5EFA\u6570\u636E\u6846\uFF0C\u7528\u4E8E\u7EC3\u4E60</span>

pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token comment"># \u4ECECSV\u2F42\u4EF6\u5BFC\u2F0A\u6570\u636E</span>

pd<span class="token punctuation">.</span>read_table<span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token comment"># \u4ECE\u9650\u5B9A\u5206\u9694\u7B26\u7684\u2F42\u672C\u2F42\u4EF6\u5BFC\u2F0A\u6570\u636E</span>

pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token comment"># \u4ECEExcel\u2F42\u4EF6\u5BFC\u2F0A\u6570\u636E</span>

pd<span class="token punctuation">.</span>read_sql<span class="token punctuation">(</span>query<span class="token punctuation">,</span>connection_object<span class="token punctuation">)</span> <span class="token comment"># \u4ECESQL\u8868/\u5E93\u5BFC\u2F0A\u6570\u636E</span>

pd<span class="token punctuation">.</span>read_json<span class="token punctuation">(</span>json_string<span class="token punctuation">)</span> <span class="token comment"># \u4ECEJSON\u683C\u5F0F\u7684\u5B57\u7B26\u4E32\u5BFC\u2F0A\u6570\u636E</span>

pd<span class="token punctuation">.</span>read_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token comment"># \u89E3\u6790URL\u3001\u5B57\u7B26\u4E32\u6216\u8005HTML\u2F42\u4EF6\uFF0C\u62BD\u53D6\u5176\u4E2D\u7684tables\u8868\u683C</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="label-\u6570\u636E\u5BFC\u51FA" tabindex="-1"><a class="header-anchor" href="#label-\u6570\u636E\u5BFC\u51FA" aria-hidden="true">#</a> @label:\u6570\u636E\u5BFC\u51FA</h5><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token comment">#\u5BFC\u51FA\u6570\u636E\u5230CSV\u2F42\u4EF6</span>

df<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token comment">#\u5BFC\u51FA\u6570\u636E\u5230Excel\u2F42\u4EF6</span>

df<span class="token punctuation">.</span>to_sql<span class="token punctuation">(</span>table_name<span class="token punctuation">,</span>connection_object<span class="token punctuation">)</span> <span class="token comment">#\u5BFC\u51FA\u6570\u636E\u5230SQL\u8868</span>

df<span class="token punctuation">.</span>to_json<span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token comment">#\u4EE5Json\u683C\u5F0F\u5BFC\u51FA\u6570\u636E\u5230\u2F42\u672C\u2F42\u4EF6</span>

writer<span class="token operator">=</span>pd<span class="token punctuation">.</span>ExcelWriter<span class="token punctuation">(</span><span class="token string">&#39;test.xlsx&#39;</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> 
df1<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span>writer<span class="token punctuation">,</span>sheet_name<span class="token operator">=</span><span class="token string">&#39;\u5355\u4F4D&#39;</span><span class="token punctuation">)</span>\u548Cwriter<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>\uFF0C\u5C06\u591A\u4E2A\u6570\u636E\u5E27\u5199\u2F0A\u540C\u2F00\u4E2A\u2F2F\u4F5C\u7C3F\u7684\u591A\u4E2Asheet<span class="token punctuation">(</span>\u2F2F\u4F5C\u8868<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="label-\u67E5\u770B\u6570\u636E" tabindex="-1"><a class="header-anchor" href="#label-\u67E5\u770B\u6570\u636E" aria-hidden="true">#</a> @label:\u67E5\u770B\u6570\u636E</h5><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment"># \u67E5\u770BDataFrame\u5BF9\u8C61\u7684\u524Dn\u2F8F</span>

df<span class="token punctuation">.</span>tail<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment"># \u67E5\u770BDataFrame\u5BF9\u8C61\u7684\u6700\u540En\u2F8F</span>

df<span class="token punctuation">.</span>shape<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># \u67E5\u770B\u2F8F\u6570\u548C\u5217\u6570</span>

df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># \u67E5\u770B\u7D22\u5F15\u3001\u6570\u636E\u7C7B\u578B\u548C\u5185\u5B58\u4FE1\u606F</span>

df<span class="token punctuation">.</span>columns<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># \u67E5\u770B\u5B57\u6BB5\uFF08\u2FB8\u2F8F\uFF09\u540D\u79F0</span>

df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># \u67E5\u770B\u6570\u503C\u578B\u5217\u7684\u6C47\u603B\u7EDF\u8BA1</span>

s<span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span>dropna<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment"># \u67E5\u770BSeries\u5BF9\u8C61\u7684\u552F\u2F00\u503C\u548C\u8BA1\u6570</span>

df<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">.</span>value_counts<span class="token punctuation">)</span> <span class="token comment"># \u67E5\u770BDataFrame\u5BF9\u8C61\u4E2D\u6BCF\u2F00\u5217\u7684\u552F\u2F00\u503C\u548C\u8BA1\u6570</span>

df<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># \u67E5\u770B\u662F\u5426\u6709\u7F3A\u5931\u503C</span>

df<span class="token punctuation">[</span>df<span class="token punctuation">[</span>column_name<span class="token punctuation">]</span><span class="token punctuation">.</span>duplicated<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># \u67E5\u770Bcolumn_name\u5B57\u6BB5\u6570\u636E\u91CD\u590D\u7684\u6570\u636E\u4FE1\u606F</span>

df<span class="token punctuation">[</span>df<span class="token punctuation">[</span>column_name<span class="token punctuation">]</span><span class="token punctuation">.</span>duplicated<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># \u67E5\u770Bcolumn_name\u5B57\u6BB5\u6570\u636E\u91CD\u590D\u7684\u4E2A\u6570</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="label-\u6570\u636E\u9009\u53D6" tabindex="-1"><a class="header-anchor" href="#label-\u6570\u636E\u9009\u53D6" aria-hidden="true">#</a> @label:\u6570\u636E\u9009\u53D6</h5><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>df<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token comment"># \u6839\u636E\u5217\u540D\uFF0C\u5E76\u4EE5Series\u7684\u5F62\u5F0F\u8FD4\u56DE\u5217</span>

df<span class="token punctuation">[</span><span class="token punctuation">[</span>col1<span class="token punctuation">,</span>col2<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment"># \u4EE5DataFrame\u5F62\u5F0F\u8FD4\u56DE\u591A\u5217</span>

s<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># \u6309\u4F4D\u7F6E\u9009\u53D6\u6570\u636E</span>

s<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token string">&#39;index_one&#39;</span><span class="token punctuation">]</span> <span class="token comment"># \u6309\u7D22\u5F15\u9009\u53D6\u6570\u636E</span>

df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment"># \u8FD4\u56DE\u7B2C\u2F00\u2F8F</span>

df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># \u8FD4\u56DE\u7B2C\u2F00\u5217\u7684\u7B2C\u2F00\u4E2A\u5143\u7D20</span>

df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment"># \u8FD4\u56DE\u7B2C\u2F00\u2F8F\uFF08\u7D22\u5F15\u4E3A\u9ED8\u8BA4\u7684\u6570\u5B57\u65F6\uFF0C\u2F64\u6CD5\u540Cdf.iloc\uFF09\uFF0C\u4F46\u9700\u8981\u6CE8\u610F\u7684\u662Floc\u662F\u6309\u7D22\u5F15,iloc\u53C2\u6570\u53EA\u63A5\u53D7\u6570\u5B57\u53C2\u6570</span>

df<span class="token punctuation">.</span>ix<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&quot;col1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;col2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token comment"># \u8FD4\u56DE\u5B57\u6BB5\u4E3Acol1\u548Ccol2\u7684\u524D5\u6761\u6570\u636E\uFF0C\u53EF\u4EE5\u7406\u89E3\u4E3Aloc\u548C</span>
iloc\u7684\u7ED3\u5408\u4F53\u3002

df<span class="token punctuation">.</span>at<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&quot;col1&quot;</span><span class="token punctuation">]</span> <span class="token comment"># \u9009\u62E9\u7D22\u5F15\u540D\u79F0\u4E3A5\uFF0C\u5B57\u6BB5\u540D\u79F0\u4E3Acol1\u7684\u6570\u636E</span>

df<span class="token punctuation">.</span>iat<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># \u9009\u62E9\u7D22\u5F15\u6392\u5E8F\u4E3A5\uFF0C\u5B57\u6BB5\u6392\u5E8F\u4E3A0\u7684\u6570\u636E</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="label-\u6570\u636E\u5904\u7406" tabindex="-1"><a class="header-anchor" href="#label-\u6570\u636E\u5904\u7406" aria-hidden="true">#</a> @label:\u6570\u636E\u5904\u7406</h5><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>df<span class="token punctuation">.</span>columns<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span> <span class="token comment"># \u91CD\u547D\u540D\u5217\u540D\uFF08\u9700\u8981\u5C06\u6240\u6709\u5217\u540D\u5217\u51FA\uFF0C\u5426\u5219\u4F1A\u62A5\u9519\uFF09</span>

pd<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># \u68C0\u67E5DataFrame\u5BF9\u8C61\u4E2D\u7684\u7A7A\u503C\uFF0C\u5E76\u8FD4\u56DE\u2F00\u4E2ABoolean\u6570\u7EC4</span>

pd<span class="token punctuation">.</span>notnull<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># \u68C0\u67E5DataFrame\u5BF9\u8C61\u4E2D\u7684\u2FAE\u7A7A\u503C\uFF0C\u5E76\u8FD4\u56DE\u2F00\u4E2ABoolean\u6570\u7EC4</span>

df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># \u5220\u9664\u6240\u6709\u5305\u542B\u7A7A\u503C\u7684\u2F8F</span>

df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># \u5220\u9664\u6240\u6709\u5305\u542B\u7A7A\u503C\u7684\u5217</span>

df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>thresh<span class="token operator">=</span>n<span class="token punctuation">)</span> <span class="token comment"># \u5220\u9664\u6240\u6709\u2F29\u4E8En\u4E2A\u2FAE\u7A7A\u503C\u7684\u2F8F</span>

df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>value<span class="token operator">=</span>x<span class="token punctuation">)</span> <span class="token comment"># \u2F64x\u66FF\u6362DataFrame\u5BF9\u8C61\u4E2D\u6240\u6709\u7684\u7A7A\u503C\uFF0C\u2F40\u6301</span>

df<span class="token punctuation">[</span>column_name<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>x<span class="token punctuation">)</span>

s<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span> <span class="token comment"># \u5C06Series\u4E2D\u7684\u6570\u636E\u7C7B\u578B\u66F4\u6539\u4E3Afloat\u7C7B\u578B</span>

s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">)</span> <span class="token comment"># \u2F64\u2018one\u2019\u4EE3\u66FF\u6240\u6709\u7B49\u4E8E1\u7684\u503C</span>

s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;three&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># \u2F64&#39;one&#39;\u4EE3\u66FF1\uFF0C\u2F64&#39;three&#39;\u4EE3\u66FF3</span>

df<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span>lambdax<span class="token punctuation">:</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># \u6279\u91CF\u66F4\u6539\u5217\u540D</span>

df<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;old_name&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;new_ name&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment"># \u9009\u62E9\u6027\u66F4\u6539\u5217\u540D</span>

df<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token string">&#39;column_one&#39;</span><span class="token punctuation">)</span> <span class="token comment"># \u5C06\u67D0\u4E2A\u5B57\u6BB5\u8BBE\u4E3A\u7D22\u5F15\uFF0C\u53EF\u63A5\u53D7\u5217\u8868\u53C2\u6570\uFF0C\u5373\u8BBE\u7F6E\u591A\u4E2A\u7D22\u5F15</span>

df<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token string">&quot;col1&quot;</span><span class="token punctuation">)</span> <span class="token comment"># \u5C06\u7D22\u5F15\u8BBE\u7F6E\u4E3Acol1\u5B57\u6BB5\uFF0C\u5E76\u5C06\u7D22\u5F15\u65B0\u8BBE\u7F6E\u4E3A0,1,2...</span>

df<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>index<span class="token operator">=</span>lambdax<span class="token punctuation">:</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># \u6279\u91CF\u91CD\u547D\u540D\u7D22\u5F15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="label-\u6570\u636E\u5408\u5E76" tabindex="-1"><a class="header-anchor" href="#label-\u6570\u636E\u5408\u5E76" aria-hidden="true">#</a> @label:\u6570\u636E\u5408\u5E76</h5><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>df1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>df2<span class="token punctuation">)</span> <span class="token comment"># \u5C06df2\u4E2D\u7684\u2F8F\u6DFB\u52A0\u5230df1\u7684\u5C3E\u90E8</span>

df<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df1<span class="token punctuation">,</span>df2<span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>join<span class="token operator">=</span><span class="token string">&#39;inner&#39;</span><span class="token punctuation">)</span> <span class="token comment"># \u5C06df2\u4E2D\u7684\u5217\u6DFB\u52A0\u5230df1\u7684\u5C3E\u90E8,\u503C\u4E3A\u7A7A\u7684\u5BF9\u5E94\u2F8F\u4E0E\u5BF9\u5E94\u5217\u90FD\u4E0D\u8981</span>
<span class="token comment"># \u5BF9df1\u7684\u5217\u548Cdf2\u7684\u5217\u6267\u2F8FSQL\u5F62\u5F0F\u7684join\uFF0C\u9ED8\u8BA4\u6309\u7167\u7D22\u5F15\u6765\u8FDB\u2F8F\u5408\u5E76\uFF0C\u5982\u679Cdf1\u548Cdf2\u6709\u5171\u540C\u5B57\u6BB5\u65F6\uFF0C\u4F1A\u62A5\u9519\uFF0C</span>
<span class="token comment"># \u53EF\u901A\u8FC7\u8BBE\u7F6Elsuffix,rsuffix\u6765\u8FDB\u2F8F\u89E3\u51B3\uFF0C\u5982\u679C\u9700\u8981\u6309\u7167\u5171\u540C\u5217\u8FDB\u2F8F\u5408\u5E76\uFF0C\u5C31\u8981\u2F64\u5230set_index(col1)</span>
df1<span class="token punctuation">.</span>join<span class="token punctuation">(</span>df2<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span>col1<span class="token punctuation">)</span><span class="token punctuation">,</span>on<span class="token operator">=</span>col1<span class="token punctuation">,</span>how<span class="token operator">=</span><span class="token string">&#39;inner&#39;</span><span class="token punctuation">)</span> 

pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span>df2<span class="token punctuation">,</span>on<span class="token operator">=</span><span class="token string">&#39;col1&#39;</span><span class="token punctuation">,</span>how<span class="token operator">=</span><span class="token string">&#39;outer&#39;</span><span class="token punctuation">)</span> <span class="token comment"># \u5BF9df1\u548Cdf2\u5408\u5E76\uFF0C\u6309\u7167col1\uFF0C\u2F45\u5F0F\u4E3Aouter</span>

pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span>df2<span class="token punctuation">,</span>left_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>right_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>how<span class="token operator">=</span><span class="token string">&#39;outer&#39;</span><span class="token punctuation">)</span> <span class="token comment"># \u4E0E df1.join(df2, how=&#39;outer&#39;)\u6548\u679C\u76F8\u540C</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="label-\u6570\u636E\u5206\u7EC4\u7EDF\u8BA1" tabindex="-1"><a class="header-anchor" href="#label-\u6570\u636E\u5206\u7EC4\u7EDF\u8BA1" aria-hidden="true">#</a> @label:\u6570\u636E\u5206\u7EC4\u7EDF\u8BA1</h5><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>df<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token comment"># \u5BF9\u524D5\u6761\u6570\u636E\u8FDB\u2F8F\u7D22\u5F15\u6392\u5E8F</span>

df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>col1<span class="token punctuation">)</span> <span class="token comment"># \u6309\u7167\u5217col1\u6392\u5E8F\u6570\u636E\uFF0C\u9ED8\u8BA4\u5347\u5E8F\u6392\u5217</span>

df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>col2<span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment"># \u6309\u7167\u5217col1\u964D\u5E8F\u6392\u5217\u6570\u636E</span>

df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token punctuation">[</span>col1<span class="token punctuation">,</span>col2<span class="token punctuation">]</span><span class="token punctuation">,</span>ascending<span class="token operator">=</span><span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token boolean">False</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># \u5148\u6309\u5217col1\u5347\u5E8F\u6392\u5217\uFF0C\u540E\u6309col2\u964D\u5E8F\u6392\u5217\u6570\u636E</span>

df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>col<span class="token punctuation">)</span> <span class="token comment"># \u8FD4\u56DE\u2F00\u4E2A\u6309\u5217col\u8FDB\u2F8F\u5206\u7EC4\u7684Groupby\u5BF9\u8C61</span>

df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span>col1<span class="token punctuation">,</span>col2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># \u8FD4\u56DE\u2F00\u4E2A\u6309\u591A\u5217\u8FDB\u2F8F\u5206\u7EC4\u7684Groupby\u5BF9\u8C61</span>

df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>col1<span class="token punctuation">)</span><span class="token punctuation">[</span>col2<span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span>mean<span class="token punctuation">)</span> <span class="token comment"># \u8FD4\u56DE\u6309\u5217col1\u8FDB\u2F8F\u5206\u7EC4\u540E\uFF0C\u5217col2\u7684\u5747\u503C,agg\u53EF\u4EE5\u63A5\u53D7\u5217\u8868\u53C2\u6570\uFF0Cagg([len,np.mean])</span>

df<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>index<span class="token operator">=</span>col1<span class="token punctuation">,</span>values<span class="token operator">=</span><span class="token punctuation">[</span>col2<span class="token punctuation">,</span>col3<span class="token punctuation">]</span><span class="token punctuation">,</span>aggfunc<span class="token operator">=</span><span class="token punctuation">{</span>col2<span class="token punctuation">:</span><span class="token builtin">max</span><span class="token punctuation">,</span>col3<span class="token punctuation">:</span><span class="token punctuation">[</span>ma<span class="token punctuation">,</span><span class="token builtin">min</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment"># \u521B\u5EFA\u2F00\u4E2A\u6309\u5217col1\u8FDB\u2F8F\u5206\u7EC4\uFF0C\u8BA1\u7B97col2\u7684\u6700\u2F24\u503C\u548Ccol3\u7684\u6700\u2F24\u503C\u3001\u6700\u2F29\u503C\u7684\u6570\u636E\u900F\u89C6\u8868</span>

df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>col1<span class="token punctuation">)</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">)</span> <span class="token comment"># \u8FD4\u56DE\u6309\u5217col1\u5206\u7EC4\u7684\u6240\u6709\u5217\u7684\u5747\u503C,\u2F40\u6301</span>

df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>col1<span class="token punctuation">)</span><span class="token punctuation">.</span>col2<span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;min&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;max&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

data<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">)</span> <span class="token comment"># \u5BF9DataFrame\u4E2D\u7684\u6BCF\u2F00\u5217\u5E94\u2F64\u51FD\u6570np.mean</span>

data<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># \u5BF9DataFrame\u4E2D\u7684\u6BCF\u2F00\u2F8F\u5E94\u2F64\u51FD\u6570np.max</span>

df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>col1<span class="token punctuation">)</span><span class="token punctuation">.</span>col2<span class="token punctuation">.</span>transform<span class="token punctuation">(</span><span class="token string">&quot;sum&quot;</span><span class="token punctuation">)</span> <span class="token comment"># \u901A\u5E38\u4E0Egroupby\u8FDE\u2F64\uFF0C\u907F\u514D\u7D22\u5F15\u66F4\u6539</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2><p>DataFrame.axes #index: \u884C\u6807\u7B7E\uFF1Bcolumns: \u5217\u6807\u7B7E DataFrame.as_matrix([columns]) #\u8F6C\u6362\u4E3A\u77E9\u9635 DataFrame.dtypes #\u8FD4\u56DE\u6570\u636E\u7684\u7C7B\u578B DataFrame.ftypes #\u8FD4\u56DE\u6BCF\u4E00\u5217\u7684 \u6570\u636E\u7C7B\u578Bfloat64:dense DataFrame.get_dtype_counts() #\u8FD4\u56DE\u6570\u636E\u6846\u6570\u636E\u7C7B\u578B\u7684\u4E2A\u6570 DataFrame.get_ftype_counts() #\u8FD4\u56DE\u6570\u636E\u6846\u6570\u636E\u7C7B\u578Bfloat64:dense\u7684\u4E2A\u6570 DataFrame.select_dtypes([include, include]) #\u6839\u636E\u6570\u636E\u7C7B\u578B\u9009\u53D6\u5B50\u6570\u636E\u6846 DataFrame.values #Numpy\u7684\u5C55\u793A\u65B9\u5F0F DataFrame.axes #\u8FD4\u56DE\u6A2A\u7EB5\u5750\u6807\u7684\u6807\u7B7E\u540D DataFrame.ndim #\u8FD4\u56DE\u6570\u636E\u6846\u7684\u7EAC\u5EA6 DataFrame.size #\u8FD4\u56DE\u6570\u636E\u6846\u5143\u7D20\u7684\u4E2A\u6570 DataFrame.shape #\u8FD4\u56DE\u6570\u636E\u6846\u7684\u5F62\u72B6 DataFrame.memory_usage() #\u6BCF\u4E00\u5217\u7684\u5B58\u50A8</p><p>DataFrame.astype(dtype[, copy, errors]) #\u8F6C\u6362\u6570\u636E\u7C7B\u578B DataFrame.copy([deep]) #deep\u6DF1\u5EA6\u590D\u5236\u6570\u636E DataFrame.isnull() #\u4EE5\u5E03\u5C14\u7684\u65B9\u5F0F\u8FD4\u56DE\u7A7A\u503C DataFrame.notnull() #\u4EE5\u5E03\u5C14\u7684\u65B9\u5F0F\u8FD4\u56DE\u975E\u7A7A\u503C</p><p>DataFrame.head([n]) #\u8FD4\u56DE\u524Dn\u884C\u6570\u636E DataFrame.at #\u5FEB\u901F\u6807\u7B7E\u5E38\u91CF\u8BBF\u95EE\u5668 DataFrame.iat #\u5FEB\u901F\u6574\u578B\u5E38\u91CF\u8BBF\u95EE\u5668 DataFrame.loc #\u6807\u7B7E\u5B9A\u4F4D\uFF0C\u4F7F\u7528\u540D\u79F0 DataFrame.iloc #\u6574\u578B\u5B9A\u4F4D\uFF0C\u4F7F\u7528\u6570\u5B57 DataFrame.insert(loc, column, value) #\u5728\u7279\u6B8A\u5730\u70B9loc[\u6570\u5B57]\u63D2\u5165column[\u5217\u540D]\u67D0\u5217\u6570\u636E DataFrame.iter() #Iterate over infor axis DataFrame.iteritems() #\u8FD4\u56DE\u5217\u540D\u548C\u5E8F\u5217\u7684\u8FED\u4EE3\u5668 DataFrame.iterrows() #\u8FD4\u56DE\u7D22\u5F15\u548C\u5E8F\u5217\u7684\u8FED\u4EE3\u5668 DataFrame.itertuples([index, name]) #Iterate over DataFrame rows as namedtuples, with index value as first element of the tuple. DataFrame.lookup(row_labels, col_labels) #Label-based \u201Cfancy indexing\u201D function for DataFrame. DataFrame.pop(item) #\u8FD4\u56DE\u5220\u9664\u7684\u9879\u76EE DataFrame.tail([n]) #\u8FD4\u56DE\u6700\u540En\u884C DataFrame.xs(key[, axis, level, drop_level]) #Returns a cross-section (row(s) or column(s)) from the Series/DataFrame. DataFrame.isin(values) #\u662F\u5426\u5305\u542B\u6570\u636E\u6846\u4E2D\u7684\u5143\u7D20 DataFrame.where(cond[, other, inplace, \u2026]) #\u6761\u4EF6\u7B5B\u9009 DataFrame.mask(cond[, other, inplace, \u2026]) #Return an object of same shape as self and whose corresponding entries are from self where cond is False and otherwise are from other. DataFrame.query(expr[, inplace]) #Query the columns of a frame with a boolean expression.</p><p>DataFrame.add(other[,axis,fill_value]) #\u52A0\u6CD5\uFF0C\u5143\u7D20\u6307\u5411 DataFrame.sub(other[,axis,fill_value]) #\u51CF\u6CD5\uFF0C\u5143\u7D20\u6307\u5411 DataFrame.mul(other[, axis,fill_value]) #\u4E58\u6CD5\uFF0C\u5143\u7D20\u6307\u5411 DataFrame.div(other[, axis,fill_value]) #\u5C0F\u6570\u9664\u6CD5\uFF0C\u5143\u7D20\u6307\u5411 DataFrame.truediv(other[, axis, level, \u2026]) #\u771F\u9664\u6CD5\uFF0C\u5143\u7D20\u6307\u5411 DataFrame.floordiv(other[, axis, level, \u2026]) #\u5411\u4E0B\u53D6\u6574\u9664\u6CD5\uFF0C\u5143\u7D20\u6307\u5411 DataFrame.mod(other[, axis,fill_value]) #\u6A21\u8FD0\u7B97\uFF0C\u5143\u7D20\u6307\u5411 DataFrame.pow(other[, axis,fill_value]) #\u5E42\u8FD0\u7B97\uFF0C\u5143\u7D20\u6307\u5411 DataFrame.radd(other[, axis,fill_value]) #\u53F3\u4FA7\u52A0\u6CD5\uFF0C\u5143\u7D20\u6307\u5411 DataFrame.rsub(other[, axis,fill_value]) #\u53F3\u4FA7\u51CF\u6CD5\uFF0C\u5143\u7D20\u6307\u5411 DataFrame.rmul(other[, axis,fill_value]) #\u53F3\u4FA7\u4E58\u6CD5\uFF0C\u5143\u7D20\u6307\u5411 DataFrame.rdiv(other[, axis,fill_value]) #\u53F3\u4FA7\u5C0F\u6570\u9664\u6CD5\uFF0C\u5143\u7D20\u6307\u5411 DataFrame.rtruediv(other[, axis, \u2026]) #\u53F3\u4FA7\u771F\u9664\u6CD5\uFF0C\u5143\u7D20\u6307\u5411 DataFrame.rfloordiv(other[, axis, \u2026]) #\u53F3\u4FA7\u5411\u4E0B\u53D6\u6574\u9664\u6CD5\uFF0C\u5143\u7D20\u6307\u5411 DataFrame.rmod(other[, axis,fill_value]) #\u53F3\u4FA7\u6A21\u8FD0\u7B97\uFF0C\u5143\u7D20\u6307\u5411 DataFrame.rpow(other[, axis,fill_value]) #\u53F3\u4FA7\u5E42\u8FD0\u7B97\uFF0C\u5143\u7D20\u6307\u5411 DataFrame.lt(other[, axis, level]) #\u7C7B\u4F3CArray.lt DataFrame.gt(other[, axis, level]) #\u7C7B\u4F3CArray.gt DataFrame.le(other[, axis, level]) #\u7C7B\u4F3CArray.le DataFrame.ge(other[, axis, level]) #\u7C7B\u4F3CArray.ge DataFrame.ne(other[, axis, level]) #\u7C7B\u4F3CArray.ne DataFrame.eq(other[, axis, level]) #\u7C7B\u4F3CArray.eq DataFrame.combine(other,func[,fill_value, \u2026]) #Add two DataFrame objects and do not propagate NaN values, so if for a DataFrame.combine_first(other) #Combine two DataFrame objects and default to non-null values in frame calling the method.</p><p>DataFrame.apply(func[, axis, broadcast, \u2026]) #\u5E94\u7528\u51FD\u6570 DataFrame.applymap(func) #Apply a function to a DataFrame that is intended to operate elementwise, i.e. DataFrame.aggregate(func[, axis]) #Aggregate using callable, string, dict, or list of string/callables DataFrame.transform(func, *args, **kwargs) #Call function producing a like-indexed NDFrame DataFrame.groupby([by, axis, level, \u2026]) #\u5206\u7EC4 DataFrame.rolling(window[, min_periods, \u2026]) #\u6EDA\u52A8\u7A97\u53E3 DataFrame.expanding([min_periods, freq, \u2026]) #\u62D3\u5C55\u7A97\u53E3 DataFrame.ewm([com, span, halflife, \u2026]) #\u6307\u6570\u6743\u91CD\u7A97\u53E3</p><p>DataFrame.abs() #\u8FD4\u56DE\u7EDD\u5BF9\u503C DataFrame.all([axis, bool_only, skipna]) #Return whether all elements are True over requested axis DataFrame.any([axis, bool_only, skipna]) #Return whether any element is True over requested axis DataFrame.clip([lower, upper, axis]) #Trim values at input threshold(s). DataFrame.clip_lower(threshold[, axis]) #Return copy of the input with values below given value(s) truncated. DataFrame.clip_upper(threshold[, axis]) #Return copy of input with values above given value(s) truncated. DataFrame.corr([method, min_periods]) #\u8FD4\u56DE\u672C\u6570\u636E\u6846\u6210\u5BF9\u5217\u7684\u76F8\u5173\u6027\u7CFB\u6570 DataFrame.corrwith(other[, axis, drop]) #\u8FD4\u56DE\u4E0D\u540C\u6570\u636E\u6846\u7684\u76F8\u5173\u6027 DataFrame.count([axis, level, numeric_only]) #\u8FD4\u56DE\u975E\u7A7A\u5143\u7D20\u7684\u4E2A\u6570 DataFrame.cov([min_periods]) #\u8BA1\u7B97\u534F\u65B9\u5DEE DataFrame.cummax([axis, skipna]) #Return cumulative max over requested axis. DataFrame.cummin([axis, skipna]) #Return cumulative minimum over requested axis. DataFrame.cumprod([axis, skipna]) #\u8FD4\u56DE\u7D2F\u79EF DataFrame.cumsum([axis, skipna]) #\u8FD4\u56DE\u7D2F\u548C DataFrame.describe([percentiles,include, \u2026]) #\u6574\u4F53\u63CF\u8FF0\u6570\u636E\u6846 DataFrame.diff([periods, axis]) #1st discrete difference of object DataFrame.eval(expr[, inplace]) #Evaluate an expression in the context of the calling DataFrame instance. DataFrame.kurt([axis, skipna, level, \u2026]) #\u8FD4\u56DE\u65E0\u504F\u5CF0\u5EA6Fisher\u2019s (kurtosis of normal == 0.0). DataFrame.mad([axis, skipna, level]) #\u8FD4\u56DE\u504F\u5DEE DataFrame.max([axis, skipna, level, \u2026]) #\u8FD4\u56DE\u6700\u5927\u503C DataFrame.mean([axis, skipna, level, \u2026]) #\u8FD4\u56DE\u5747\u503C DataFrame.median([axis, skipna, level, \u2026]) #\u8FD4\u56DE\u4E2D\u4F4D\u6570 DataFrame.min([axis, skipna, level, \u2026]) #\u8FD4\u56DE\u6700\u5C0F\u503C DataFrame.mode([axis, numeric_only]) #\u8FD4\u56DE\u4F17\u6570 DataFrame.pct_change([periods, fill_method]) #\u8FD4\u56DE\u767E\u5206\u6BD4\u53D8\u5316 DataFrame.prod([axis, skipna, level, \u2026]) #\u8FD4\u56DE\u8FDE\u4E58\u79EF DataFrame.quantile([q, axis, numeric_only]) #\u8FD4\u56DE\u5206\u4F4D\u6570 DataFrame.rank([axis, method, numeric_only]) #\u8FD4\u56DE\u6570\u5B57\u7684\u6392\u5E8F DataFrame.round([decimals]) #Round a DataFrame to a variable number of decimal places. DataFrame.sem([axis, skipna, level, ddof]) #\u8FD4\u56DE\u65E0\u504F\u6807\u51C6\u8BEF DataFrame.skew([axis, skipna, level, \u2026]) #\u8FD4\u56DE\u65E0\u504F\u504F\u5EA6 DataFrame.sum([axis, skipna, level, \u2026]) #\u6C42\u548C DataFrame.std([axis, skipna, level, ddof]) #\u8FD4\u56DE\u6807\u51C6\u8BEF\u5DEE DataFrame.var([axis, skipna, level, ddof]) #\u8FD4\u56DE\u65E0\u504F\u8BEF\u5DEE</p><p>DataFrame.add_prefix(prefix) #\u6DFB\u52A0\u524D\u7F00 DataFrame.add_suffix(suffix) #\u6DFB\u52A0\u540E\u7F00 DataFrame.align(other[, join, axis, level]) #Align two object on their axes with the DataFrame.drop(labels[, axis, level, \u2026]) #\u8FD4\u56DE\u5220\u9664\u7684\u5217 DataFrame.drop_duplicates([subset, keep, \u2026]) #Return DataFrame with duplicate rows removed, optionally only DataFrame.duplicated([subset, keep]) #Return boolean Series denoting duplicate rows, optionally only DataFrame.equals(other) #\u4E24\u4E2A\u6570\u636E\u6846\u662F\u5426\u76F8\u540C DataFrame.filter([items, like, regex, axis]) #\u8FC7\u6EE4\u7279\u5B9A\u7684\u5B50\u6570\u636E\u6846 DataFrame.first(offset) #Convenience method for subsetting initial periods of time series data based on a date offset. DataFrame.head([n]) #\u8FD4\u56DE\u524Dn\u884C DataFrame.idxmax([axis, skipna]) #Return index of first occurrence of maximum over requested axis. DataFrame.idxmin([axis, skipna]) #Return index of first occurrence of minimum over requested axis. DataFrame.last(offset) #Convenience method for subsetting final periods of time series data based on a date offset. DataFrame.reindex([index, columns]) #Conform DataFrame to new index with optional filling logic, placing NA/NaN in locations having no value in the previous index. DataFrame.reindex_axis(labels[, axis, \u2026]) #Conform input object to new index with optional filling logic, placing NA/NaN in locations having no value in the previous index. DataFrame.reindex_like(other[, method, \u2026]) #Return an object with matching indices to myself. DataFrame.rename([index, columns]) #Alter axes input function or functions. DataFrame.rename_axis(mapper[, axis, copy]) #Alter index and / or columns using input function or functions. DataFrame.reset_index([level, drop, \u2026]) #For DataFrame with multi-level index, return new DataFrame with labeling information in the columns under the index names, defaulting to \u2018level_0\u2019, \u2018level_1\u2019, etc. DataFrame.sample([n, frac, replace, \u2026]) #\u8FD4\u56DE\u968F\u673A\u62BD\u6837 DataFrame.select(crit[, axis]) #Return data corresponding to axis labels matching criteria DataFrame.set_index(keys[, drop, append ]) #Set the DataFrame index (row labels) using one or more existing columns. DataFrame.tail([n]) #\u8FD4\u56DE\u6700\u540E\u51E0\u884C DataFrame.take(indices[, axis, convert]) #Analogous to ndarray.take DataFrame.truncate([before, after, axis ]) #Truncates a sorted NDFrame before and/or after some particular index value.</p><p>DataFrame.dropna([axis, how, thresh, \u2026]) #Return object with labels on given axis omitted where alternately any DataFrame.fillna([value, method, axis, \u2026]) #\u586B\u5145\u7A7A\u503C DataFrame.replace([to_replace, value, \u2026]) #Replace values given in \u2018to_replace\u2019 with \u2018value\u2019.</p><p>DataFrame.pivot([index, columns, values]) #Reshape data (produce a \u201Cpivot\u201D table) based on column values. DataFrame.reorder_levels(order[, axis]) #Rearrange index levels using input order. DataFrame.sort_values(by[, axis, ascending]) #Sort by the values along either axis DataFrame.sort_index([axis, level, \u2026]) #Sort object by labels (along an axis) DataFrame.nlargest(n, columns[, keep]) #Get the rows of a DataFrame sorted by the n largest values of columns. DataFrame.nsmallest(n, columns[, keep]) #Get the rows of a DataFrame sorted by the n smallest values of columns. DataFrame.swaplevel([i, j, axis]) #Swap levels i and j in a MultiIndex on a particular axis DataFrame.stack([level, dropna]) #Pivot a level of the (possibly hierarchical) column labels, returning a DataFrame (or Series in the case of an object with a single level of column labels) having a hierarchical index with a new inner-most level of row labels. DataFrame.unstack([level, fill_value]) #Pivot a level of the (necessarily hierarchical) index labels, returning a DataFrame having a new level of column labels whose inner-most level consists of the pivoted index labels. DataFrame.melt([id_vars, value_vars, \u2026]) #\u201CUnpivots\u201D a DataFrame from wide format to long format, optionally DataFrame.T #Transpose index and columns DataFrame.to_panel() #Transform long (stacked) format (DataFrame) into wide (3D, Panel) format. DataFrame.to_xarray() #Return an xarray object from the pandas object. DataFrame.transpose(*args, **kwargs) #Transpose index and columns</p><p>DataFrame.append(other[, ignore_index, \u2026]) #\u8FFD\u52A0\u6570\u636E DataFrame.assign(**kwargs) #Assign new columns to a DataFrame, returning a new object (a copy) with all the original columns in addition to the new ones. DataFrame.join(other[, on, how, lsuffix, \u2026]) #Join columns with other DataFrame either on index or on a key column. DataFrame.merge(right[, how, on, left_on, \u2026]) #Merge DataFrame objects by performing a database-style join operation by columns or indexes. DataFrame.update(other[, join, overwrite, \u2026]) #Modify DataFrame in place using non-NA values from passed DataFrame.</p><p>DataFrame.asfreq(freq[, method, how, \u2026]) #\u5C06\u65F6\u95F4\u5E8F\u5217\u8F6C\u6362\u4E3A\u7279\u5B9A\u7684\u9891\u6B21 DataFrame.asof(where[, subset]) #The last row without any NaN is taken (or the last row without DataFrame.shift([periods, freq, axis]) #Shift index by desired number of periods with an optional time freq DataFrame.first_valid_index() #Return label for first non-NA/null value DataFrame.last_valid_index() #Return label for last non-NA/null value DataFrame.resample(rule[, how, axis, \u2026]) #Convenience method for frequency conversion and resampling of time series. DataFrame.to_period([freq, axis, copy]) #Convert DataFrame from DatetimeIndex to PeriodIndex with desired DataFrame.to_timestamp([freq, how, axis]) #Cast to DatetimeIndex of timestamps, at beginning of period DataFrame.tz_convert(tz[, axis, level, copy]) #Convert tz-aware axis to target time zone. DataFrame.tz_localize(tz[, axis, level, \u2026]) #Localize tz-naive TimeSeries to target time zone.</p><p>DataFrame.plot([x, y, kind, ax, \u2026.]) #DataFrame plotting accessor and method DataFrame.plot.area([x, y]) #\u9762\u79EF\u56FEArea plot DataFrame.plot.bar([x, y]) #\u5782\u76F4\u6761\u5F62\u56FEVertical bar plot DataFrame.plot.barh([x, y]) #\u6C34\u5E73\u6761\u5F62\u56FEHorizontal bar plot DataFrame.plot.box([by]) #\u7BB1\u56FEBoxplot DataFrame.plot.density(**kwds) #\u6838\u5BC6\u5EA6Kernel Density Estimate plot DataFrame.plot.hexbin(x, y[, C, \u2026]) #Hexbin plot DataFrame.plot.hist([by, bins]) #\u76F4\u65B9\u56FEHistogram DataFrame.plot.kde(**kwds) #\u6838\u5BC6\u5EA6Kernel Density Estimate plot DataFrame.plot.line([x, y]) #\u7EBF\u56FELine plot DataFrame.plot.pie([y]) #\u997C\u56FEPie chart DataFrame.plot.scatter(x, y[, s, c]) #\u6563\u70B9\u56FEScatter plot DataFrame.boxplot([column, by, ax, \u2026]) #Make a box plot from DataFrame column optionally grouped by some columns or DataFrame.hist(data[, column, by, grid, \u2026]) #Draw histogram of the DataFrame\u2019s series using matplotlib / pylab.</p><p>DataFrame.from_csv(path[, header, sep, \u2026]) #Read CSV file (DEPRECATED, please use pandas.read_csv() instead). DataFrame.from_dict(data[, orient, dtype]) #Construct DataFrame from dict of array-like or dicts DataFrame.from_items(items[,columns,orient]) #Convert (key, value) pairs to DataFrame. DataFrame.from_records(data[, index, \u2026]) #Convert structured or record ndarray to DataFrame DataFrame.info([verbose, buf, max_cols, \u2026]) #Concise summary of a DataFrame. DataFrame.to_pickle(path[, compression, \u2026]) #Pickle (serialize) object to input file path. DataFrame.to_csv([path_or_buf, sep, na_rep]) #Write DataFrame to a comma-separated values (csv) file DataFrame.to_hdf(path_or_buf, key, **kwargs) #Write the contained data to an HDF5 file using HDFStore. DataFrame.to_sql(name, con[, flavor, \u2026]) #Write records stored in a DataFrame to a SQL database. DataFrame.to_dict([orient, into]) #Convert DataFrame to dictionary. DataFrame.to_excel(excel_writer[, \u2026]) #Write DataFrame to an excel sheet DataFrame.to_json([path_or_buf, orient, \u2026]) #Convert the object to a JSON string. DataFrame.to_html([buf, columns, col_space]) #Render a DataFrame as an HTML table. DataFrame.to_feather(fname) #write out the binary feather-format for DataFrames DataFrame.to_latex([buf, columns, \u2026]) #Render an object to a tabular environment table. DataFrame.to_stata(fname[, convert_dates, \u2026]) #A class for writing Stata binary dta files from array-like objects DataFrame.to_msgpack([path_or_buf, encoding]) #msgpack (serialize) object to input file path DataFrame.to_sparse([fill_value, kind]) #Convert to SparseDataFrame DataFrame.to_dense() #Return dense representation of NDFrame (as opposed to sparse) DataFrame.to_string([buf, columns, \u2026]) #Render a DataFrame to a console-friendly tabular output. DataFrame.to_clipboard([excel, sep]) #Attempt to write text representation of object to the system clipboard This can be pasted into Excel, for example.</p>`,28),p=[o];function l(i,c){return n(),s("div",null,p)}const r=a(t,[["render",l],["__file","py-pandas.html.vue"]]);export{r as default};
