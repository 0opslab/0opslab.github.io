import{_ as n,o as s,c as a,e as t}from"./app.a667bd71.js";const p={},e=t(`<p>lambda \u8868\u8FBE\u5F0F\uFF0C\u5B83\u53EF\u4EE5\u8BA9\u6211\u4EEC\u907F\u514D\u8BB8\u591A\u91CD\u590D\u6027\u7684\u5DE5\u4F5C\u3002Java\u4E2D\u7684 lambda \u8868\u8FBE\u5F0F\u5B9E\u8D28\u4E0A\u662F\u4E00\u4E2A\u533F\u540D\u65B9\u6CD5\uFF0C\u4F46\u8BE5\u65B9\u6CD5\u5E76\u975E\u72EC\u7ACB\u6267\u884C\uFF0C\u800C\u662F\u7528\u4E8E\u5B9E\u73B0\u7531\u51FD\u6570\u5F0F\u63A5\u53E3\u5B9A\u4E49\u7684\u552F\u4E00\u62BD\u8C61\u65B9\u6CD5\u3002</p><p>Mybatis-plus\u4E2D\u7684lambda\u4E3B\u8981\u6709QueryWrapper(LambdaQueryWrapper) \u548C UpdateWrapper(LambdaUpdateWrapper) \u7684\u7236\u7C7B\u7528\u4E8E\u751F\u6210 sql \u7684 where \u6761\u4EF6, entity \u5C5E\u6027\u4E5F\u7528\u4E8E\u751F\u6210 sql \u7684 where \u6761\u4EF6\u6CE8\u610F: entity \u751F\u6210\u7684 where \u6761\u4EF6\u4E0E \u4F7F\u7528\u5404\u4E2A api \u751F\u6210\u7684 where \u6761\u4EF6<strong>\u6CA1\u6709\u4EFB\u4F55\u5173\u8054\u884C\u4E3A</strong></p><h4 id="lambdaquerywrapper" tabindex="-1"><a class="header-anchor" href="#lambdaquerywrapper" aria-hidden="true">#</a> LambdaQueryWrapper</h4><p>lambda \u6784\u5EFA\u590D\u6742\u7684\u67E5\u8BE2\u6761\u4EF6\u6784\u9020\u5668\uFF1ALambdaQueryWrapper\uFF0C\u4E0B\u9762\u662F\u5E38\u89C1\u7684\u6784\u9020\u65B9\u5F0F</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">&gt;</span></span> lambda <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">&gt;</span></span> lambda <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">&gt;</span></span> lambda <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryChainWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>userMapper<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> <span class="token string">&quot;\u96E8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="lambdaupdatewrapper" tabindex="-1"><a class="header-anchor" href="#lambdaupdatewrapper" aria-hidden="true">#</a> LambdaUpdateWrapper</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">LambdaUpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">&gt;</span></span> luw <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token function">lambdaUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLambdaUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">LambdaUpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">&gt;</span></span> luw <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token function">lambdaUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    luw<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">UserEntity</span><span class="token operator">::</span><span class="token function">getUserName</span><span class="token punctuation">,</span> <span class="token string">&quot;dunzung01&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">UserEntity</span><span class="token operator">::</span><span class="token function">getSex</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    luw<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">UserEntity</span><span class="token operator">::</span><span class="token function">getUserId</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> luw<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="\u5E38\u7528\u7684\u6761\u4EF6\u6784\u9020\u5668" tabindex="-1"><a class="header-anchor" href="#\u5E38\u7528\u7684\u6761\u4EF6\u6784\u9020\u5668" aria-hidden="true">#</a> \u5E38\u7528\u7684\u6761\u4EF6\u6784\u9020\u5668</h5><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>setSqlSelect	\u8BBE\u7F6E <span class="token constant">SELECT</span> \u67E5\u8BE2\u5B57\u6BB5
where	<span class="token constant">WHERE</span> \u8BED\u53E5\uFF0C\u62FC\u63A5 <span class="token operator">+</span> <span class="token constant">WHERE</span> \u6761\u4EF6
and	<span class="token constant">AND</span> \u8BED\u53E5\uFF0C\u62FC\u63A5 <span class="token operator">+</span> <span class="token constant">AND</span> \u5B57\u6BB5<span class="token operator">=</span>\u503C
andNew	<span class="token constant">AND</span> \u8BED\u53E5\uFF0C\u62FC\u63A5 <span class="token operator">+</span> <span class="token constant">AND</span> <span class="token punctuation">(</span>\u5B57\u6BB5<span class="token operator">=</span>\u503C<span class="token punctuation">)</span>
or	<span class="token constant">OR</span> \u8BED\u53E5\uFF0C\u62FC\u63A5 <span class="token operator">+</span> <span class="token constant">OR</span> \u5B57\u6BB5<span class="token operator">=</span>\u503C
orNew	<span class="token constant">OR</span> \u8BED\u53E5\uFF0C\u62FC\u63A5 <span class="token operator">+</span> <span class="token constant">OR</span> <span class="token punctuation">(</span>\u5B57\u6BB5<span class="token operator">=</span>\u503C<span class="token punctuation">)</span>
eq	\u7B49\u4E8E<span class="token operator">=</span>
allEq	\u57FA\u4E8E map \u5185\u5BB9\u7B49\u4E8E<span class="token operator">=</span>
ne	\u4E0D\u7B49\u4E8E<span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span>
gt	\u5927\u4E8E<span class="token operator">&gt;</span>
ge	\u5927\u4E8E\u7B49\u4E8E<span class="token operator">&gt;=</span>
lt	\u5C0F\u4E8E<span class="token operator">&lt;</span>
le	\u5C0F\u4E8E\u7B49\u4E8E<span class="token operator">&lt;=</span>
like	\u6A21\u7CCA\u67E5\u8BE2 <span class="token constant">LIKE</span>
notLike	\u6A21\u7CCA\u67E5\u8BE2 <span class="token constant">NOT</span> <span class="token constant">LIKE</span>
likeLeft \u5DE6\u901A\u914D\u7B26\u6A21\u7CCA\u67E5\u8BE2
likeRight \u53F3\u901A\u914D\u7B26\u6A21\u7CCA\u67E5\u8BE2    
in	<span class="token constant">IN</span> \u67E5\u8BE2
notIn	<span class="token constant">NOT</span> <span class="token constant">IN</span> \u67E5\u8BE2
isNull	<span class="token constant">NULL</span> \u503C\u67E5\u8BE2
isNotNull	<span class="token constant">IS</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span>
groupBy	\u5206\u7EC4 <span class="token constant">GROUP</span> <span class="token constant">BY</span>
having	<span class="token constant">HAVING</span> \u5173\u952E\u8BCD
orderBy	\u6392\u5E8F <span class="token constant">ORDER</span> <span class="token constant">BY</span>
orderAsc	<span class="token constant">ASC</span> \u6392\u5E8F <span class="token constant">ORDER</span> <span class="token constant">BY</span>
orderDesc	<span class="token constant">DESC</span> \u6392\u5E8F <span class="token constant">ORDER</span> <span class="token constant">BY</span>
exists	<span class="token constant">EXISTS</span> \u6761\u4EF6\u8BED\u53E5
notExists	<span class="token constant">NOT</span> <span class="token constant">EXISTS</span> \u6761\u4EF6\u8BED\u53E5
between	<span class="token constant">BETWEEN</span> \u6761\u4EF6\u8BED\u53E5
notBetween	<span class="token constant">NOT</span> <span class="token constant">BETWEEN</span> \u6761\u4EF6\u8BED\u53E5
addFilter	\u81EA\u7531\u62FC\u63A5 <span class="token constant">SQL</span>
last	\u62FC\u63A5\u5728\u6700\u540E\uFF0C\u4F8B\u5982\uFF1A<span class="token function">last</span><span class="token punctuation">(</span>\u201C<span class="token constant">LIMIT</span> <span class="token number">1</span>\u201D<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="\u5E38\u7528\u5B9E\u4F8B" tabindex="-1"><a class="header-anchor" href="#\u5E38\u7528\u5B9E\u4F8B" aria-hidden="true">#</a> \u5E38\u7528\u5B9E\u4F8B</h5><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//\u7B49\u503C\u67E5\u8BE2\uFF1Aeq</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLambdaQueryOfEq</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//eq\u67E5\u8BE2</span>
    <span class="token comment">//\u81F3\u5173\u4E8E select * from sys_user where user_id = 1</span>
    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">&gt;</span></span> lqw <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lqw<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">UserEntity</span><span class="token operator">::</span><span class="token function">getUserId</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">UserEntity</span> user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>lqw<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;eq\u67E5\u8BE2::&quot;</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//\u8303\u56F4\u67E5\u8BE2 \uFF1Ain</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLambdaQueryOfIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> ids <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">&gt;</span></span> lqw <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    lqw<span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token class-name">UserEntity</span><span class="token operator">::</span><span class="token function">getUserId</span><span class="token punctuation">,</span> ids<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>lqw<span class="token punctuation">)</span><span class="token punctuation">;</span>
    userList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>u <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;in\u67E5\u8BE2::&quot;</span> <span class="token operator">+</span> u<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//\u901A\u914D\u7B26\u6A21\u7CCA\u67E5\u8BE2\uFF1Alike</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLambdaQueryOfLikeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">&gt;</span></span> lqw <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lqw<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">UserEntity</span><span class="token operator">::</span><span class="token function">getSex</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">UserEntity</span><span class="token operator">::</span><span class="token function">getUserName</span><span class="token punctuation">,</span> <span class="token string">&quot;dun&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>lqw<span class="token punctuation">)</span><span class="token punctuation">;</span>
    userList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>u <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;like\u5168\u5305\u542B\u5173\u952E\u5B57\u67E5\u8BE2::&quot;</span> <span class="token operator">+</span> u<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//\u53F3\u901A\u914D\u7B26\u6A21\u7CCA\u67E5\u8BE2\uFF1AlikeRight</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLambdaQueryOfLikeRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">&gt;</span></span> lqw <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lqw<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">UserEntity</span><span class="token operator">::</span><span class="token function">getSex</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">likeRight</span><span class="token punctuation">(</span><span class="token class-name">UserEntity</span><span class="token operator">::</span><span class="token function">getUserName</span><span class="token punctuation">,</span> <span class="token string">&quot;dun&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>lqw<span class="token punctuation">)</span><span class="token punctuation">;</span>
    userList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>u <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;like Right\u542B\u5173\u952E\u5B57\u67E5\u8BE2::&quot;</span> <span class="token operator">+</span> u<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//\u5DE6\u901A\u914D\u7B26\u6A21\u7CCA\u67E5\u8BE2\uFF1AlikeLeft</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLambdaQueryOfLikeLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">&gt;</span></span> lqw <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lqw<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">UserEntity</span><span class="token operator">::</span><span class="token function">getSex</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">likeLeft</span><span class="token punctuation">(</span><span class="token class-name">UserEntity</span><span class="token operator">::</span><span class="token function">getUserName</span><span class="token punctuation">,</span> <span class="token string">&quot;zung&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>lqw<span class="token punctuation">)</span><span class="token punctuation">;</span>
    userList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>u <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;like Left\u542B\u5173\u952E\u5B57\u67E5\u8BE2::&quot;</span> <span class="token operator">+</span> u<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">//\u5229\u7528 or \u548C and \u6784\u5EFA\u590D\u6742\u7684\u67E5\u8BE2\u6761\u4EF6</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLambdaQueryOfOr_And</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">&gt;</span></span> lqw <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lqw<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">UserEntity</span><span class="token operator">::</span><span class="token function">getSex</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>wrapper<span class="token operator">-&gt;</span>wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">UserEntity</span><span class="token operator">::</span><span class="token function">getUserName</span><span class="token punctuation">,</span><span class="token string">&quot;dunzung&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span><span class="token class-name">UserEntity</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>lqw<span class="token punctuation">)</span><span class="token punctuation">;</span>
    userList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>u <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;like\u67E5\u8BE2::&quot;</span> <span class="token operator">+</span> u<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//\u5584\u4E8E\u5229\u7528\u5206\u9875\u5229\u5668 PageHelpler</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLambdaPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//PageHelper\u5206\u9875\u67E5\u8BE2</span>
    <span class="token comment">//\u81F3\u5173\u4E8E select * from sys_user limit 0,2</span>
    <span class="token keyword">int</span> pageNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> pageSize <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>pageNumber <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">&gt;</span></span> lqw <span class="token operator">=</span> <span class="token class-name">Wrappers</span><span class="token punctuation">.</span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    lqw<span class="token punctuation">.</span><span class="token function">orderByAsc</span><span class="token punctuation">(</span><span class="token class-name">UserEntity</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span>
          <span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token class-name">UserEntity</span><span class="token operator">::</span><span class="token function">getMobile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserEntity</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>lqw<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    userList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>u <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;page\u5206\u9875\u67E5\u8BE2::&quot;</span> <span class="token operator">+</span> u<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),c=[e];function o(l,u){return s(),a("div",null,c)}const k=n(p,[["render",o],["__file","mybatis-plus-lambda.html.vue"]]);export{k as default};
