import{_ as s,o as a,c as n,e}from"./app.a667bd71.js";const p={},t=e(`<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token comment">#\`\`\`ops</span>
<span class="token comment">#title:IO_test of three times</span>
<span class="token comment">#descr:</span>
<span class="token comment">#\`\`\`</span>
<span class="token comment">#</span>
<span class="token comment"># Version: 1.0</span>

<span class="token builtin class-name">echo</span> <span class="token string">&quot;IO testing....&quot;</span>
<span class="token function-name function">io_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token environment constant">LANG</span><span class="token operator">=</span>C <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>test_<span class="token variable">$$</span> <span class="token assign-left variable">bs</span><span class="token operator">=</span>64k <span class="token assign-left variable">count</span><span class="token operator">=</span>16k <span class="token assign-left variable">conv</span><span class="token operator">=</span>fdatasync <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> test_<span class="token variable">$$</span> <span class="token punctuation">)</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">|</span> <span class="token function">awk</span> -F, <span class="token string">&#39;{io=$NF} END { print io}&#39;</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">&#39;s/^[ \\t]*//;s/[ \\t]*$//&#39;</span>
<span class="token punctuation">}</span>

<span class="token assign-left variable">io1</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span> io_test <span class="token variable">)</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;I/O speed(1st run)   : <span class="token variable">$io1</span>&quot;</span>
<span class="token assign-left variable">io2</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span> io_test <span class="token variable">)</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;I/O speed(2nd run)   : <span class="token variable">$io2</span>&quot;</span>
<span class="token assign-left variable">io3</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span> io_test <span class="token variable">)</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;I/O speed(3rd run)   : <span class="token variable">$io3</span>&quot;</span>
<span class="token assign-left variable">ioraw1</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span> <span class="token builtin class-name">echo</span> $io1 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;NR==1 {print $1}&#39;</span> <span class="token variable">)</span></span>
<span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">echo</span> $io1 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;NR==1 {print $2}&#39;</span><span class="token variable">\`</span></span>&quot;</span> <span class="token operator">==</span> <span class="token string">&quot;GB/s&quot;</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable">ioraw1</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span> <span class="token function">awk</span> <span class="token string">&#39;BEGIN{print &#39;</span>$ioraw1<span class="token string">&#39; * 1024}&#39;</span> <span class="token variable">)</span></span>
<span class="token assign-left variable">ioraw2</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span> <span class="token builtin class-name">echo</span> $io2 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;NR==1 {print $1}&#39;</span> <span class="token variable">)</span></span>
<span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">echo</span> $io2 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;NR==1 {print $2}&#39;</span><span class="token variable">\`</span></span>&quot;</span> <span class="token operator">==</span> <span class="token string">&quot;GB/s&quot;</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable">ioraw2</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span> <span class="token function">awk</span> <span class="token string">&#39;BEGIN{print &#39;</span>$ioraw2<span class="token string">&#39; * 1024}&#39;</span> <span class="token variable">)</span></span>
<span class="token assign-left variable">ioraw3</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span> <span class="token builtin class-name">echo</span> $io3 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;NR==1 {print $1}&#39;</span> <span class="token variable">)</span></span>
<span class="token punctuation">[</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">echo</span> $io3 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;NR==1 {print $2}&#39;</span><span class="token variable">\`</span></span>&quot;</span> <span class="token operator">==</span> <span class="token string">&quot;GB/s&quot;</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token assign-left variable">ioraw3</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span> <span class="token function">awk</span> <span class="token string">&#39;BEGIN{print &#39;</span>$ioraw3<span class="token string">&#39; * 1024}&#39;</span> <span class="token variable">)</span></span>
<span class="token assign-left variable">ioall</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span> <span class="token function">awk</span> <span class="token string">&#39;BEGIN{print &#39;</span>$ioraw1<span class="token string">&#39; + &#39;</span>$ioraw2<span class="token string">&#39; + &#39;</span>$ioraw3<span class="token string">&#39;}&#39;</span> <span class="token variable">)</span></span>
<span class="token assign-left variable">ioavg</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span> <span class="token function">awk</span> <span class="token string">&#39;BEGIN{printf &quot;%.1f&quot;, &#39;</span>$ioall<span class="token string">&#39; / 3}&#39;</span> <span class="token variable">)</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;Average I/O speed    : <span class="token variable">$ioavg</span> MB/s&quot;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),o=[t];function l(i,c){return a(),n("div",null,o)}const k=s(p,[["render",l],["__file","io-test-sh.html.vue"]]);export{k as default};
